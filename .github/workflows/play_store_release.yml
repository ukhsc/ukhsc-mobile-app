name: Release to Play Store

on:
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane"
        required: true
        default: "beta"
        type: choice
        options:
          - beta
          - promote_to_production
          - production

permissions:
  contents: read
  deployments: write

jobs:
  fastlane-deploy:
    runs-on: ubuntu-latest
    name: Deploy Android to Play Store
    steps:
      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: []
            });
            console.log('Created deployment:', deployment.data.id);
            return deployment.data.id;

      - name: Set Deployment Status to In Progress
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment in progress...',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version-file: pubspec.yaml
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Generate files
        run: |
          echo "$ENV_FILE_CONTENTS" > .env
          dart run build_runner build --delete-conflicting-outputs
        env:
          ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}

      - name: Setup Ruby environment for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4.1"
          bundler-cache: true
          working-directory: android

      - name: Configure Signing and Play Store
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties

          echo "$PLAY_STORE_CONFIG_JSON" > play_store_config.json
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          PLAY_STORE_CONFIG_JSON: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
        working-directory: android

      - name: Deploy to Play Store
        run: bundle exec fastlane ${{ github.event.inputs.lane || 'beta' }}
        working-directory: android

      - name: Sentry Release
        run: dart run sentry_dart_plugin
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Generate ISO Timestamp
        id: timestamp
        run: |
          echo "ISO_TIME=$(date -u -d @${{ github.event.repository.pushed_at }} +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const deployment_id = ${{ steps.deployment.outputs.result }};
            const success = '${{ job.status }}' === 'success';

            try {
              const status = {
                owner,
                repo,
                deployment_id,
                state: success ? 'success' : 'failure',
                description: success ? 'Deployment succeeded!' : 'Deployment failed',
                log_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
                environment_url: undefined,
                auto_inactive: success
              };

              console.log('Updating deployment status:', status);
              await github.rest.repos.createDeploymentStatus(status);

              if (!success) {
                core.setFailed('Deployment failed');
              }
            } catch (error) {
              console.error('Error updating deployment status:', error);
              core.setFailed(error.message);
            }

      - name: Send Discord Notification
        uses: tsickert/discord-webhook@v6.0.0
        if: always()
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          embed-title: 📱 UKHSC 系統 Android 部署通知
          embed-description: |
            ### 部署狀態：${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}

            **平台：** Android
            **分支：** `${{ github.ref_name }}`
            **提交者：** ${{ github.actor }}
            **部署環境：** Google Play Store (${{ github.event.inputs.lane || 'beta' }})
            **部署時間：** <t:${{ github.event.repository.pushed_at }}:F>

            [查看部署詳細資訊](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          embed-color: ${{ job.status == 'success' && '65280' || '16711680' }}
          embed-footer-text: "UKHSC System Android Deployment"
          embed-timestamp: ${{ steps.timestamp.outputs.ISO_TIME }}